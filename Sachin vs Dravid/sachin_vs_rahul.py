# -*- coding: utf-8 -*-
"""Practice_FDSW3Asgn1Prob1_Solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KK5xqXOWUN0tmQU3fAO3_eEUhb-zqesD

# **Cricket Case Study**

1.   Find mean, median, IQR for Sachin, Rahul, and India
2.   Find the histogram of Sachin's scores with 10 bins
3.   Find mean of Sachin's scores grouped by 25 matches
4.   Find mean of Sachin's scores where he has scored a century
5.   Find mean of Sachin's scores when Rahul has scored less than 10
6.   Find mean for Sachin's scores based on which quartile India's score falls in
7.   For every match find out who has has scored more - Sachin or Rahul
8.   How many more runs does Sachin score on average after having scored x runs
9.   How many matches did Sachin take to score first 1000 runs, next 1000 runs, ...
"""

!head cric_data.tsv

"""# **Problem 1**"""

import numpy as np

cric_data = np.loadtxt("cric_data.tsv", skiprows=1)

cric_data.shape

cric_data = cric_data[:, 1:]

cric_data.shape

# np.mean(cric_data, axis=0)

# np.median(cric_data, axis=0)

sachin = cric_data[:, 0]

# np.mean(sachin)

dravid = cric_data[:, 1]

india=cric_data[:, 2]

# sachin

# sachin.shape

# sachin = sachin.reshape(225,1) #sachin = cric_data[:, 0].reshape(225,1)

# dravid = cric_data[:, 1].reshape(225,1)

# dravid.shape

# india=cric_data[:, 2].reshape(225,1)

# sachin_percent = np.percentile(sachin, [25,75])

# sachin_iqr = sachin_percent[1] - sachin_percent[0]

# sachin_iqr

def stats(col):
  print('Mean' , np.mean(col))
  print('Median' , np.median(col))
  print('IQR' , np.percentile(col, 75) - np.percentile(col, 25))

stats(sachin)

"""# **Problem 2**"""

np.histogram?

np.histogram(sachin, bins=10)

"""# **Problem 3**"""

sachin_25s = sachin.reshape(9, 25)

sachin_25s

np.mean(sachin_25s, axis=1)

"""# **Problem 4,5**"""

np.mean(sachin[sachin>=100])

np.mean(sachin[dravid<10])

"""# **Problem 6**"""

qrs = np.percentile(india, [25, 50, 75, 100])

india.shape

qrs = qrs.reshape(4,1)

indices = india < qrs

indices.shape

sachin[indices[1, :]].shape

for i in range(4):
    print(i, np.mean(sachin[indices[i]]))

"""# **Problem 7**"""

snr = cric_data[:, :2]

snr

rahul_higher = np.argmax(snr, axis=1)

np.sum(rahul_higher)/225

np.where(rahul_higher == 0, 'Sachin', 'Rahul')

"""# **Problem 8**"""

x_arr = np.arange(0, 101, 5)

sachin < x_arr

x_arr = x_arr.reshape(x_arr.shape[0],1)

indices = (sachin >= x_arr)

indices

sachin[indices[1, :]]

indices.shape

for i in range(x_arr.shape[0]):
  print(x_arr[i, 0], np.mean(sachin[indices[i, :]]) - x_arr[i, 0])

"""# **Problem 9**"""

sachin

sachin_cumsum = np.cumsum(sachin)

np.histogram(sachin_cumsum, bins = np.arange(0,10000,1000))

